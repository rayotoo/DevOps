Description: >
    Raymond Otoo / Udagram
    A cloudFormation template for deploying a high-availability web application on a pre-configured infrastructure.
    Deployed afte network.yaml has deployed the root resources.

Parameters:
  ProjectName:
    Description: Name of the Project that will be used as prefix for resources.
    Type: String
    Default: Udagram
 
  EC2ImageId:
    Description: Id of the Amazon machine image to use for EC2 deployments.
    Type: String
    Default: ami-0747bdcabd34c712a
  
  EC2InstanceType:
    Type: String 
    Description: 'EC2 Instance Type'
    Default: t2.micro

  EC2VolumeSize:
    Description: The size of the EBS volume attached to an EC2 instance. 
    Type: Number
    Default: 10





# All the resources needed for the servers of this infrastructure are created here
Resources:

  # This IAM Resource Configuration allows the EC2 instances to access S3 bucket in a ReadOnly mode
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2




  # This section configures the security Group for the Load Balancer Security and Web Server Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-LB-SecurityGroup"
  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Webserver-SecurityGroup" 




  # Set up for the Launch configuration and configuration of the Autoscaling group.
  WebAppAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${ProjectName}-PRIV-NETS"          
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: !Ref EC2ImageId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
      - Ref: WebserverSecurityGroup
      InstanceType: !Ref EC2InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref EC2VolumeSize



  # This section configures the Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${ProjectName}-PUB2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP
  WebAppLoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'WebAppLoadBalancerListener'
        Priority: 1




  # This section configures the target Group for the LoadBalancer and the autoscaling group    
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"



# Results displayed in the output section after a successful deployment
Outputs: 
    WebAppLoadBalancerDnsName: 
        Description: The domain of the WebApp Load Balancer used to access the deployed services from any web browser.
        Value: !Sub "http://${WebAppLoadBalancer.DNSName}"